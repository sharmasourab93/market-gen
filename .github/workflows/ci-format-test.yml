name: Run Formatter & Tests with Pytest

on:
  push:
    branches:
      - '*'

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12  # Python version

      - name: Install Black
        run: pip install isort black

      - name: Run Black and Apply Formatting
        run: |
          black `git ls-files '*.py'`
          isort `git ls-files '*.py'`

      - name: Show changes
        run: |
          git --no-pager diff

      - name: Show branch
        run: |
          git rev-parse --abbrev-ref HEAD

      - name: Commit and Push Changes if Black made changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git diff --exit-code; then
            echo "No changes made by Black, skipping commit and push."
          else
            git add .
            git commit -m "Apply Black formatting"
            git push origin `git rev-parse --abbrev-ref HEAD`
          fi

  unit-tests-pytest:
    name: Run unit tests with pytest
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Install system level libraries
        run: |
          sudo apt-get update
          sudo apt-get -y install libpq-dev gcc

      - name: Checkout code from remote origin.
        uses: actions/checkout@v2

      - name: Add project root to PYTHONPATH
        run: |
          import os
          import sys
          sys.path.append(os.path.abspath('.'))
        shell: python

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-json-report pytest-freezegun
          pip install -r requirements.txt

      - name: Print current working directory
        run: | 
          pwd
          ls -lart

      - name: Run tests
        run: |
          pytest --cov=. --cov-config=.coveragerc --cov-report=html:coverage_report --json-report --json-report-file=test_report.json tests/
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload Coverage and test reports
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: |
            coverage_report/
            test_report.json